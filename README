TRIO: Topologies Robustness IndicatOr
Copyright (C) 2014 - SINTEF ICT

TRIO is a simple domain specific language (DSL) used to describe the topology
of software deployment and to gain insight regarding their robustness.

1. CONTACT
----------

Please report any bugs or desired feature at:

    https://github.com/fchauvel/trio/issues


Should you need any additional information, please contact:

    Franck CHAUVEL 
    Research Scientist - SINTEF ICT
    franck.chauvel@sintef.no


2. HOW TO DOWNLOAD TRIO
-----------------------

Stable releases are available on the Github page of the projects:

    https://github.com/fchauvel/trio/releases


In addition, a binary distribution, continuously updated, is available at:

    http://dist.thingml.org/trio/trio-dist.zip



3. HOW TO RUN TRIO
------------------

Trio is a java application, which should be run from the command line. The 
following example show its primary usage.

$> java -jar .\trio-bundle.jar something
Unknown argument 'something'. Expecting either a path to a TRIO file or an option.
Usage: trio [options] input.trio
where 'options' are:
  -o, --output=FILE  the file where the generated data shall be stored
  -r, --runs=INTEGER the number of sample for statistical evidence
Example: trio -o result.csv --run=10000 system.trio



4. HOW TO BUILD TRIO
--------------------

$> mvn clean package



5. HOW TO RELEASE TRIO
----------------------

Before to create a release, one should ensure the following:

 - Read/write access to the git repository 

 - Valid credentials to connect on the "deployment" server are
   configured in .m2/settings.xml

The configuration of the SCM maven plugin can be tested using the
following command:

$> mvn scm:validate

Under Windows, one shall set up an ssh agent to avoid that the git
command hang waiting for a passphrase. The following commands are
necessary (run on the git-bash):

$> eval `ssh-agent`
$> env | grep SSH
$> ssh-add "/c/Users/franckc/.ssh/id_rsa"
   enter passphrase : XXXXXXXX

The Maven release plugin can be run in a "dryRun" mode using the
option '-DdryRun=true-'. We recommend to get the 'dry run' before to
run the 'release:prepare' command.

$> mvn --batch-mode release:prepare -DreleaseVersion=1.0 -DdevelopmentVersion=1.1-SNAPSHOT

$> mvn release:perform

If anything goes wrong during the prepare or perform command, on can
revert the info committed in the repository using the following
commands:

$> git reset --hard <id of the commit you want to reset to>
$> git push origin master --force